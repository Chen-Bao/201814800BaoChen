from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans
from sklearn.cluster import AffinityPropagation
from sklearn.cluster import MeanShift
from sklearn.cluster import SpectralClustering
from sklearn.cluster import AgglomerativeClustering
from sklearn.cluster import DBSCAN
from sklearn.mixture import GaussianMixture
from sklearn import metrics

#####data process#######
f1=open("Tweets.txt")
tweets=f1.readlines()
numOfDocuments=len(tweets) # number of total documents in this dataset
#print(numOfDocuments)
cate_tweets=[]#documents with the sign of cluster
for i in range(150):
    cate_tweets.append(0)

for tweet in tweets:
    splitTweet=tweet.split(":")
    body=splitTweet[1].split(",")
    content=body[0].strip('\"')
    content=content.strip(' \"')
    cluster=splitTweet[2].strip("\n")
    cluster=int(cluster.strip("}"))
    #print(cluster)
    if(cate_tweets[cluster]==0):
        cate_tweets[cluster]=[]
        cate_tweets[cluster].append(content)
    else:
        cate_tweets[cluster].append(content)
#print(cate_tweets)

pure_doc=[] #Pure documents without the sign of cluster
for i in range(len(cate_tweets)):
    if cate_tweets[i]==0:
        continue
    else:
        for doc in cate_tweets[i]:
            pure_doc.append(doc)

tfidf_vectorizer=TfidfVectorizer()

tfidf_matrix = tfidf_vectorizer.fit_transform(pure_doc)

#f2=open("tfidf_matrix_sklearn.txt","w")
#for item in tfidf_matrix:
    #f2.write("%s\n"%item)
#f2.close()

#####data process finished#######

#true labels#
ff=open("category.txt")
cate_content=ff.readlines()
category=[]
for cate in cate_content:
    category.append(int(cate.strip("\n")))
print(category)
labels_true=category

#kmeans#
num_clusters = 89
km_cluster = KMeans(n_clusters=num_clusters, max_iter=300, n_init=40, init='k-means++', n_jobs=-1)
#labels generated by clustering#
result = km_cluster.fit_predict(tfidf_matrix)
labels_pred=result
f2=open("kmeans_cluster_sklearn.txt","w")
for res in result:
    f2.write("%s\n"%res)
f2.close()

#evaluation using NMI#
kmeans_score=metrics.normalized_mutual_info_score(labels_true,labels_pred)
print("Kmeans:%s"%kmeans_score)

#AffinityPropagation
ap_cluster=AffinityPropagation()
result=ap_cluster.fit_predict(tfidf_matrix)
labels_pred=result
f3=open("AffinityPropagation_cluster_sklearn.txt","w")
for res in result:
    f3.write("%s\n"%res)
f3.close()

#evaluation using NMI#
ap_score=metrics.normalized_mutual_info_score(labels_true,labels_pred)
print("AffinityPropagation:%s"%ap_score)

#MeanShift
ms_cluster=MeanShift()
tfidf_matrix=tfidf_matrix.toarray()
result=ms_cluster.fit_predict(tfidf_matrix)
labels_pred=result
f4=open("MeanShift_cluster_sklearn.txt","w")
for res in result:
    f4.write("%s\n"%res)
f4.close()

#evaluation using NMI#
ms_score=metrics.normalized_mutual_info_score(labels_true,labels_pred)
print("MeanShift:%s"%ms_score)

#SpectralClustering
sc_cluster=SpectralClustering()
result=sc_cluster.fit_predict(tfidf_matrix)
labels_pred=result
f5=open("SpectralClustering_cluster_sklearn.txt","w")
for res in result:
    f5.write("%s\n"%res)
f5.close()

#evaluation using NMI#
sc_score=metrics.normalized_mutual_info_score(labels_true,labels_pred)
print("SpectralClustering:%s"%sc_score)

#Ward hierarchical clustering
n_clusters=89
wh_cluster=AgglomerativeClustering(n_clusters=n_clusters,linkage='ward')
tfidf_matrix=tfidf_matrix.toarray()
result=wh_cluster.fit_predict(tfidf_matrix)
labels_pred=result
f5=open("WardHierarchical_cluster_sklearn.txt","w")
for res in result:
    f5.write("%s\n"%res)
f5.close()

#evaluation using NMI#
wh_score=metrics.normalized_mutual_info_score(labels_true,labels_pred)
print("WardHierarchical:%s"%wh_score)


#AgglomerativeClustering
n_clusters=89
agg_cluster=AgglomerativeClustering(n_clusters=n_clusters,linkage="average")
tfidf_matrix=tfidf_matrix.toarray()
result=agg_cluster.fit_predict(tfidf_matrix)
labels_pred=result
f5=open("AgglomerativeClustering_cluster_sklearn.txt","w")
for res in result:
    f5.write("%s\n"%res)
f5.close()

#evaluation using NMI#
agg_score=metrics.normalized_mutual_info_score(labels_true,labels_pred)
print("AgglomerativeClustering:%s"%agg_score)

#DBSCAN
db_cluster=DBSCAN(eps=1,min_samples=0.5)
result=db_cluster.fit_predict(tfidf_matrix)
labels_pred=result
f5=open("DBSCAN_cluster_sklearn.txt","w")
for res in result:
    f5.write("%s\n"%res)
f5.close()

#evaluation using NMI#
db_score=metrics.normalized_mutual_info_score(labels_true,labels_pred)
print("DBSCAN:%s"%db_score)

#Gaussian Mixture
tfidf_matrix=tfidf_matrix.toarray()
gauss_cluster=GaussianMixture(n_components=89,covariance_type='full').fit(tfidf_matrix)

result=gauss_cluster.predict(tfidf_matrix)
labels_pred=result
f5=open("Gauss_cluster_sklearn.txt","w")
for res in result:
    f5.write("%s\n"%res)
f5.close()

#evaluation using NMI#
gauss_score=metrics.normalized_mutual_info_score(labels_true,labels_pred)
print("Gauss:%s"%gauss_score)


